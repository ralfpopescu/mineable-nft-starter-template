/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RendererInterface extends ethers.utils.Interface {
  functions: {
    "armor(uint256,uint256)": FunctionFragment;
    "assets(uint256,uint256,uint256)": FunctionFragment;
    "celerity(uint256,uint256)": FunctionFragment;
    "getAugmented(uint256)": FunctionFragment;
    "getBonusMod(uint256)": FunctionFragment;
    "getGearName(uint256)": FunctionFragment;
    "getGearType(uint256)": FunctionFragment;
    "getRarity(uint256)": FunctionFragment;
    "getVariation(uint256)": FunctionFragment;
    "health(uint256,uint256)": FunctionFragment;
    "rarityColors(uint256,uint256)": FunctionFragment;
    "rarityToVariationMod(uint256)": FunctionFragment;
    "render(uint256)": FunctionFragment;
    "weapons(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "armor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "celerity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAugmented",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusMod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGearName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGearType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRarity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVariation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "health",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rarityColors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rarityToVariationMod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "render",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weapons",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "armor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "celerity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAugmented",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBonusMod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGearName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGearType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRarity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVariation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "health", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rarityColors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rarityToVariationMod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "render", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weapons", data: BytesLike): Result;

  events: {};
}

export class Renderer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RendererInterface;

  functions: {
    armor(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    celerity(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAugmented(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBonusMod(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getGearName(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGearType(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getRarity(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVariation(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    health(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rarityColors(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    rarityToVariationMod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    render(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { svg: string }>;

    weapons(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  armor(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assets(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  celerity(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAugmented(
    mgear: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBonusMod(mgear: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getGearName(
    mgear: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGearType(mgear: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getRarity(mgear: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getVariation(mgear: BigNumberish, overrides?: CallOverrides): Promise<number>;

  health(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rarityColors(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  rarityToVariationMod(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  render(mgear: BigNumberish, overrides?: CallOverrides): Promise<string>;

  weapons(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    armor(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    celerity(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAugmented(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBonusMod(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getGearName(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGearType(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getRarity(mgear: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getVariation(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    health(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rarityColors(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    rarityToVariationMod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    render(mgear: BigNumberish, overrides?: CallOverrides): Promise<string>;

    weapons(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    armor(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    celerity(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAugmented(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBonusMod(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGearName(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGearType(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRarity(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVariation(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    health(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rarityColors(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rarityToVariationMod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    render(mgear: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    weapons(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    armor(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    celerity(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAugmented(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBonusMod(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGearName(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGearType(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRarity(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVariation(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    health(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rarityColors(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rarityToVariationMod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    render(
      mgear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weapons(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
